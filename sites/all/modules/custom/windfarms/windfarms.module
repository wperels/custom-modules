
<?php

/**
 * @file
 * Custom functionality for a wind farm database.
 */

/**
 * Implements hook_help().
 */
function windfarms_help($path, $arg) {
  switch ($path) {
    case 'admin/help#windfarms':{
      $ret_val = '<h3>' . t('About') . '</h3>';
      $ret_val .= '<p>' . t('The Wind Farms module makes it easy to manage a database of wind farms.') . '</p>';
      return $ret_val;
      break;
    }
  }
}
/**
 * Implements hook_permission().
 */
function windfarms_permission() {
  return array(
    'administer wind farms' => array(
      'title' => t('Administer Wind Farms'),
      'description' => t('Perform administrative tasks on Wind Farms functionality'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function windfarms_menu() {
  $items = array();
  
  // Admin configuration group.
  $items['admin/config/windfarms'] = array(
    'title' => 'Wind Farms',
    'description' => 'Administer Wind Farms',
    'access arguments' => array('administer wind farms'),
  );
  
  // Admin configuration - Settings.
  $items['admin/config/windfarms/manage'] = array(
    'title' => 'Wind Farm settings',
    'description' => 'Manage Wind Farm settings and configurations.',
    'access arguments' => array('administer wind farms'),
    //'page callback' => 'windfarms_admin_settings_form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('windfarms_admin_settings_form'),
  );
  return $items;  
}
/**
 * Implements hook_form().
 */
function windfarms_admin_settings_form($node, &$form_state) {
    $form = array();
    $form['overview'] = array(
      '#markup' => t('This interface allows administrators to manage general Wind Farm Settings'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',);
    $form['windfarms_gmap'] = array(
      '#title' => t('Enable Google Maps'),
      '#description' => t('When enabled, Google Maps will be rendered if latitude and longitude are known'),
      '#type' => 'checkbox',
      //'#default_value' => 1,)
        '#default_value' => variable_get('windfarms_gmap'),
      );
    $form['default_center'] = array(
      '#title' => t('Map Center'),
      '#description' => t('Location of the center of the map of wind farms'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,);
    $form['default_center']['windfarms_default_center_lat'] = array(
      '#title' => t('Latitude'),
      '#description' => t('Signed degrees format (DDD.dddd)'),
      '#type' => 'textfield',
      //'#default_value' => 42.91455,
      '#default_value' => variable_get('windfarms_default_center_lat'),
      '#required' => TRUE,);
    $form['default_center']['windfarms_default_center_long'] = array(
      '#title' => t('Longitude'),
      '#description' => t('Signed degrees format (DDD.dddd)'),
      '#type' => 'textfield',
     // '#default_value' => -75.569851,
      '#default_value' => variable_get('windfarms_default_center_long'),
      '#required' => TRUE,);    
    $options = range(0, 20, 1);
    $options[0] = t('0 - Furthest');
    $options[20] = t('20 - Closest');    
    $form['windfarms_default_gmap_zoom'] = array(
      '#title' => t('Google Map zoom'),
      '#description' => t('Default level of zoom, between 0 and 20.'),
      '#type' => 'select',
      '#options' => $options,
      //'#default_value' => 8,
      '#default_value' => variable_get('windfarms_default_gmap_zoom'),
      '#required' => TRUE,);    
  
    return system_settings_form($form);
    }
/**
 * Validates wind farm admin settings.
 */
function windfarms_admin_settings_form_validate($form, &$form_state) {
     //dpm($form_state['values']); 
     
     // Regular expression for validating signed degrees.
     // $signed_degree_regex = '/^[+-]?\d+(\.\d+)?$/';
     
     // Shorthand for long array names.
     $lat = $form_state['values']['windfarms_default_center_lat'];
     $long = $form_state['values']['windfarms_default_center_long'];
     
     // Validate latitude and longitude format.
     if (!_windfarms_validate_signed_degrees($lat)) {
       form_set_error('windfarms_default_center_lat', t('Invalid latitude; must be a signed degree(DDD.dddd).'));
       }
     if (!_windfarms_validate_signed_degrees($long)) {
       form_set_error('windfarms_default_center_lat', t('Invalid longitude; must be a signed degree(DDD.dddd).'));
       }
       
       //Validate latitude and logitude values.
       if (!_windfarms_validate_geo_coord_range($lat)) {
       form_set_error('windfarms_default_center_lat', t('Latitude must be between -180 and 180'));
       }
       if (!_windfarms_validate_geo_coord_range($long)) {
         form_set_error('windfarms_default_center_long', t('Longitude must be between -180 and 180'));
       }
    }

     /**
      * Implements hook_form_alter.
      */
    function windfarms_form_alter(&$form, &$form_state, $form_id) {
      switch ($form_id) {
        case 'windfarm_node_form':{
          //dpm($form);
          $form['#validate'][] = 'windfarms_windfarm_node_form_validate';
          break;
        }
      }
      
    }
    /**
     *  Validates Wind Farm content type.
     */
    function windfarms_windfarm_node_form_validate($form, &$form_state) {
//      dpm($form_state); 
//      form_set_error('', 'testing');
      
      // Validate Unit Count.
      $value = $form_state['values']['windfarm_unit_count4'][LANGUAGE_NONE][0]['value'];
      
      if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value <=0)) 
      {
        form_set_error('windfarm_unit_count4', t('The number of units on a wind farm must be a positive whole number.'));
      }
      
      // Validate latitude.
      $lat = $form_state ['values']['windfarm_latitude4'][LANGUAGE_NONE][0]['value'];
      
      if (!_windfarms_validate_geo_coord_range($lat)|| !_windfarms_validate_signed_degrees($lat)) 
      {
        form_set_error('windfarm_latitude4', t('Latitude must be valid coordinates in signed degrees'));
      }
      
      // Validate longitude.
      $long = $form_state ['values']['windfarm_longitude4'][LANGUAGE_NONE][0]['value'];
      
      if (!_windfarms_validate_geo_coord_range($long)|| !_windfarms_validate_signed_degrees($long)) 
      {
        form_set_error('windfarm_longitude4', t('Longitude must be valid coordinates in signed degrees'));
      }
    }
    
    
    /**
     * Determine if a value is in signed degrees format.
     * 
     * @param string $value
     *    The value to be tested.
     * 
     * @return boolean
     *    TRUE if correctly formatted.
     */
    function _windfarms_validate_signed_degrees($value)
    {
      $signed_degree_regex = '/^[+-]?\d+(\.\d+)?$/';
      return preg_match($signed_degree_regex, $value) ? TRUE : FALSE;
    }
    
    /**
     *  Determine if a geographic coordinate is within the valid range.
     * 
     * @param string $value
     *    The value to be tested.
     * @return boolean
     *    TRUE if between -180 and 180.
     */
    function _windfarms_validate_geo_coord_range($value) {
      return ((-180 <= $value) && ($value <= 180));
    }
    
    /**
     *  Implements hook_feeds_importer_default().
     */
    function windfarms_hook_feeds_importer_default() {
      $export = array();
      $feeds_importer = new stdClass();
        $feeds_importer->disabled = FALSE; 
        $feeds_importer->api_version = 1;
        $feeds_importer->id = 'openei_wind_farms';
        $feeds_importer->config = array(
          'name' => 'OpenEI Wind Farms',
          'description' => 'CSV Import of OpenEI Wind Farm Database',
          'fetcher' => array(
            'plugin_key' => 'FeedsFileFetcher',
            'config' => array(
              'allowed_extensions' => 'txt csv tsv xml opml',
              'direct' => FALSE,
              'directory' => 'public://feeds',
              'allowed_schemes' => array(
                0 => 'public',
              ),
            ),
          ),
          'parser' => array(
            'plugin_key' => 'FeedsCSVParser',
            'config' => array(
              'delimiter' => ',',
              'encoding' => 'UTF-8',
              'no_headers' => 0,
            ),
          ),
          'processor' => array(
            'plugin_key' => 'FeedsNodeProcessor',
            'config' => array(
              'expire' => '-1',
              'author' => 0,
              'authorize' => 1,
              'mappings' => array(
                0 => array(
                  'source' => 'Facility Name',
                  'target' => 'title',
                  'unique' => FALSE,
                  'language' => 'und',
                ),
                1 => array(
                  'source' => 'Facility',
                  'target' => 'body',
                  'unique' => FALSE,
                  'language' => 'und',
                ),
                2 => array(
                  'source' => 'NumberOfUnits',
                  'target' => 'windfarm_unit_count4',
                  'unique' => FALSE,
                  'language' => 'und',
                ),
                3 => array(
                  'source' => 'Latitude',
                  'target' => 'windfarm_latitude4',
                  'unique' => FALSE,
                  'language' => 'und',
                ),
                4 => array(
                  'source' => 'Longitude',
                  'target' => 'windfarm_longitude4',
                  'unique' => FALSE,
                  'language' => 'und',
                ),
                5 => array(
                  'source' => 'WindTurbineManufacturer',
                  'target' => 'windfarm_turbine_manufacturer4',
                  'unique' => FALSE,
                ),
              ),
              'insert_new' => '1',
              'update_existing' => '0',
              'update_non_existent' => 'skip',
              'input_format' => 'plain_text',
              'skip_hash_check' => 0,
              'bundle' => 'windfarm',
              'language' => 'und',
            ),
          ),
          'content_type' => '',
          'update' => 0,
          'import_period' => '-1',
          'expire_period' => 3600,
          'import_on_create' => 1,
          'process_in_background' => 0,
        );
        $export['openei_wind_farms'] = $feeds_importer;
        return $export;
    }
      /**
       *  Implement hook_ctools_plugin_api().
       */
      
      function windfarms_ctools_plugin_api($module = '', $api = ''){
        if($module == 'feeds' && $api == 'feeds_importer_default') {
          return array('version' => 1);
        }
      }
      
      /**
       * Implements hook_node_view().
       */
      
      function windfarms_node_view($node, $view_mode, $langcode) {
        if ($node->type == 'windfarm' && $view_mode == 'full') {
        $node->content['windfarm_gmap'] = array(
          '#markup' => theme('windfarm_gmap', array(
            'node' => $node,
          )),
          '#weight' => 100,
          );
        }
      }
      
      /**
       *  Implements hook_theme().
       */
      function windfarms_theme($existing, $type, $theme, $path) {
        return array(
          'windfarm_gmap' => array(
            'variables' => array('node' => NULL),
          ),
        );
      }
      
      /**
       *  Wind Farm Google Map theme function.
       */
      function theme_windfarm_gmap($variables) {
        //dpm($variables);
        // Check to see if the Google Map is enabled.
       if (!variable_get('windfarms_gmap')) {
          return;
       }
       
       $lat = $variables['node']->windfarm_latitude4[LANGUAGE_NONE][0]['value'];
       $long = $variables['node']->windfarm_longitude4[LANGUAGE_NONE][0]['value'];
       
       // Cannot render map without both a latitude and a longitude.
       if (($lat == '') || ($long == '')) {
         return;
       }
       
       module_load_include('inc', 'gmap3_tools');
       
       $facility_name = check_plain($variables['node']->title);
       $description = check_plain($variables['node']->body[LANGUAGE_NONE][0]['value']);
       
       gmap3_tools_add_map(array(
         'mapId' =>'gmap-canvas-' . $variables['node']->nid,
         'mapOptions' => array(
           'zoom' => (int) variable_get('windfarms_default_gmap_zoom'),
           'mapTypeId' => GMAP3_TOOLS_MAP_TYPE_ID_SATELLITE,
         ),
         'markers' => array(
           gmap3_tools_create_marker($lat, $long, $facility_name, $description),
         ),
         'gmap3ToolsOptions' => array(
           'defaultMarkersPosition' => GMAP3_TOOLS_DEFAULT_MARKERS_POSITION_CENTER,
         ),
       ));
       
       $output = '<div id="gmap-canvas-' . $variables['node']->nid . '" style="width:500px;height:400px;"></div>';
       return $output;
  
      }
      
      /**
       *  Implements hook_block_info().
       */
      function windfarms_block_info() {
        $blocks = array();
        
        $blocks['gmap'] = array(
          'info' => t('Wind Farm Map'),
          );
        
        return $blocks;
      }
      
      /**
       *  Implements hook_block_view().
       */
      function windfarms_block_view($delta = '') {
        $block = array();
        
        switch($delta) {
          case 'gmap':{
            $block['subject'] = t('Wind Farm Map');
            $block['content'] = windfarm_block_contents($delta);
            break;
          }
        }
        
        return $block;
      }
      
      /**
       * Wind Farm Block contents.
       * 
       * @param string $delta
       *   The block ID.
       * 
       *  @return string
       *    HTML output.
       */
      function windfarm_block_contents($delta) {
        //xdebug_start_trace();
        $output = '';
        switch($delta) {
          case 'gmap':{
            module_load_include('inc', 'location', 'earth');
            
            // 100 miles.
            $distance_meters = 100 * 1609.34;
            
            // Determine the range of lat and long from the default center.
            $lat = variable_get('windfarms_default_center_lat');
            $long = variable_get('windfarms_default_center_long');
            
            $range_lat = earth_latitude_range($long, $lat, $distance_meters);
            $range_long = earth_longitude_range($long, $lat, $distance_meters);
            
            // Build query.
            $query = new EntityFieldQuery();
            
            // Only show nodes.
            $query->entityCondition('entity_type', 'node');
            
            // Only show windfarms.
            $query->entityCondition('bundle', 'windfarm');
            
            // Only show latitude between range.
            $query->fieldCondition('windfarm_latitude4', 'value', $range_lat, 'BETWEEN');
            
            // Only show longitude between range.
            $query->fieldCondition('windfarm_longitude4', 'value', $range_long, 'BETWEEN');
            
            
            // Execute query.
            //dpm((string) $query);
            $result = $query->execute();
            //dpm($result);
            //dpm($result);
            //dpm($query);
            //echo '<h1> look at result array</h1>';
            //print_r($result);
           //var_dump($result);
//            //print_r($result);
//            //echo '<h1> look at query array</h1>';
//            //var_dump($query);
            //print_r($query);
                        
            // No results.
            if(!isset($result['node'])) {
              return '';
              //$nodes = array_keys($result['node']);
              //$nodes_items = entity_load('node', $nodes);
            }
            
           
            $nodes = node_load_multiple(array_keys($result['node']));


            module_load_include('inc', 'gmap3_tools');
            
            $markers = array();
            
            foreach ($nodes as $node) {
              $lat = $node->windfarm_latitude4[LANGUAGE_NONE][0]['value'];
              $long = $node->windfarm_longitude4[LANGUAGE_NONE][0]['value'];
              
              // Cannot render map without both.
              if (($lat == '') || ($long == '')) {
                continue;
              }
              
            $facility_name = check_plain($node->title);
            $description = check_plain($node->body[LANGUAGE_NONE][0]['value']);
            
            // Add a link to the node.
            $description .= ' ' . l(t('More info'), 'node/' . $node->nid);
            
            // Add to markers.
            $markers[] = gmap3_tools_create_marker($lat, $long, $facility_name, $description
        );
            }
            
            // Create map with all the markers.
            gmap3_tools_add_map(array(
              'mapId' => 'gmap-canvas-block',
              'mapOptions' => array(
                 'mapTypeId' => GMAP3_TOOLS_MAP_TYPE_ID_SATELLITE,
              ),
              'markers' => $markers,
              //dpm($markers);
              'gmap3ToolsOptions' => array(
                'defaultMarkersPosition' => GMAP3_TOOLS_DEFAULT_MARKERS_POSITION_CENTER_ZOOM,
              ),
            ));
            
            // HTML container for the map.
            $output = '<div id="gmap-canvas-block" style="width:500px;height:400px;"></div>';
            break;
          }
        }
        return $output;
      //xdebug_stop_trace();
      }
    